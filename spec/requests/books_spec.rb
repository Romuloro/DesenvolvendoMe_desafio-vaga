require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/books", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Book. As you add validations to Book, be sure to
  # adjust the attributes here as well.
  let!(:book) {create(:book)}
  let!(:book_attributes) {attributes_for(:book)}

  describe "GET /index" do
    context "when the book exists"  do
      before do
        get "/books/"
      end

      it "renders a successful response" do
        expect(response).to have_http_status(:success)
      end

      it "renders books titulo" do
        expect(response.body).to include(book.titulo)
      end

      it "renders books Published at" do
        expect(response.body).to include(book.published_at.to_s)
      end
      it "renders books author name" do
        expect(response.body).to include(book.author.name)
      end

    end
  end

  describe "GET /show" do
    context "when the book exists"  do
      before do
        get "/books/", params: {id:book.id}
      end

      it "renders a successful response" do
        expect(response).to have_http_status(:success)
      end

      it "renders books titulo" do
        expect(response.body).to include(book.titulo)
      end

      it "renders books Published at" do
        expect(response.body).to include(book.published_at.to_s)
      end
      it "renders books author name" do
        expect(response.body).to include(book.author.name)
      end
    end

    context "when the book doesn't exists" do
      let!(:book_error) {build(:book)}
      before do
        get "/books/", params: {id:book_error.id}
      end

      it "not renders book titulo" do
        expect(response.body).to_not include(book_error.titulo)
      end
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get "/books/new"
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    context "when the books exists"  do
      before do
        get "/books/#{book.id}/edit"
      end

      it "renders a successful response" do
        expect(response).to be_successful
      end

      it "renders books titulo" do
        expect(response.body).to include(book.titulo)
      end

      it "renders books Published at" do
        expect(response.body).to include(book.published_at.to_datetime.to_s[0..-7])
      end
      it "renders books author name" do
        expect(response.body).to include(book.author.name)
      end
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      before do
        post "/books/", params: { book: { titulo: book.titulo, published_at: book.published_at.to_datetime.to_s[0..-7], author_id: book.author.id}}

      end

      it "creates a new Book" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the created book" do
        get "/books", params: { id: book.id }
        expect(response.body).to include("Book was successfully created.")
      end
    end

    context "with valid parameters in API" do
      before do
        post "/books.json", params: { book: { titulo: book.titulo, published_at: book.published_at.to_datetime.to_s[0..-7], author_id: book.author.id} }
      end

      it "creates a new Book" do
        expect(response).to have_http_status(:created)
      end

      it "the created author message" do
        expect(response.body).to include("Book #{book.titulo} was successfully created.")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      before do
        patch "/books/#{book.id}", params: { book: book_attributes }
      end

      it "redirects to the book" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the update book" do
        get "/books", params: { id: book.id }
        expect(response.body).to include("Book was successfully updated.")
      end

      it "redirects to the update book titulo" do
        get "/books/#{book.id}"
        expect(response.body).to include(book.reload.titulo.to_s)
      end
      it "redirects to the update book published at" do
        get "/books/#{book.id}"
        expect(response.body).to include(book.reload.published_at.to_s)
      end
      it "redirects to the update book author name" do
        get "/books/#{book.id}"
        expect(response.body).to include(book.reload.author.name.to_s)
      end
    end

    context "with valid parameters in API" do
      before do
        put "/books/#{book.id}.json", params: { book: book_attributes }
      end

      it "redirects to the author" do
        expect(response).to have_http_status(:ok)
      end

      it "redirects to the update author" do
        expect(response.body).to include("Book #{book_attributes[:titulo]} was successfully updated.")
      end
    end
  end

  describe "DELETE /destroy" do
    context "with valid parameters" do
      before do
        delete "/books/#{book.id}"
      end

      it "destroys the requested author" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the delete author" do
        get "/books", params: { id: book.id }
        expect(response.body).to include("Book was successfully destroyed.")
      end
    end

    context "with valid parameters in API" do
      before do
        delete "/books/#{book.id}.json"
      end

      it "destroys the requested author" do
        expect(response).to have_http_status(:ok)
      end

      it "redirects to the delete author" do
        expect(response.body).to include("Book #{book.titulo} was successfully destroyed.")
      end
    end
  end
end
