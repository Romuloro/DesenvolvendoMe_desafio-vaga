require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/authors", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Author. As you add validations to Author, be sure to
  # adjust the attributes here as well.
  let!(:author) {create(:author)}
  let!(:author_attributes) {attributes_for(:author)}

  describe "GET /index" do
    context "when the author exists"  do
      before do
        get "/authors/"
      end

      it "renders a successful response" do
        expect(response).to have_http_status(:success)
      end

      it "renders authors name" do
        expect(response.body).to include(author.name)
      end
    end
  end

  describe "GET /show" do
    context "when the author exists"  do
      before do
        get "/authors/", params: {id:author.id}
      end

      it "renders a successful response" do
        expect(response).to have_http_status(:success)
      end

      it "renders authors name" do
        expect(response.body).to include(author.name)
      end
    end

    context "when the author doesn't exists" do
      let!(:author_error) {build(:author)}
      before do
        get "/authors/", params: {id:author_error.id}
      end

      it "not renders authors name" do
        expect(response.body).to_not include(author_error.name)
      end
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get "/authors/new"
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    context "when the author exists"  do
      before do
        get "/authors/#{author.id}/edit"
      end

      it "renders a successful response" do
        expect(response).to be_successful
      end

      it "renders authors name" do
        expect(response.body).to include(author.name)
      end
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      before do
        post "/authors/", params: { author: author_attributes }
      end

      it "creates a new Author" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the created author" do
        get "/authors", params: { id: author.id }
        expect(response.body).to include("Author was successfully created.")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      before do
        patch "/authors/#{author.id}", params: { author: author_attributes }
      end

      it "redirects to the author" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the update author" do
        get "/authors", params: { id: author.id }
        expect(response.body).to include("Author was successfully updated.")
      end

      it "redirects to the update author name" do
        get "/authors/#{author.id}"
        expect(response.body).to include(author.reload.name.to_s)
      end
    end
  end

  describe "DELETE /destroy" do
    context "with valid parameters" do
      before do
        delete "/authors/#{author.id}"
      end

      it "destroys the requested author" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the delete author" do
        get "/authors", params: { id: author.id }
        expect(response.body).to include("Author was successfully destroyed.")
      end
    end
  end
end
