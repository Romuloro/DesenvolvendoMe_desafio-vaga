require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/accounts", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Account. As you add validations to Account, be sure to
  # adjust the attributes here as well.
  let!(:account) {create(:account)}
  let!(:account_attributes) {attributes_for(:account)}

  describe "GET /index" do
    context "when the account exists"  do
      before do
        get "/accounts/"
      end

      it "renders a successful response" do
        expect(response).to have_http_status(:success)
      end

      it "renders accounts number" do
        expect(response.body).to include(account.account_number)
      end

      it "renders account supplier name" do
        expect(response.body).to include(account.supplier.name.to_s)
      end
    end
  end

  describe "GET /show" do
    context "when the account exists"  do
      before do
        get "/accounts/", params: {id:account.id}
      end

      it "renders a successful response" do
        expect(response).to have_http_status(:success)
      end

      it "renders accounts number" do
        expect(response.body).to include(account.account_number)
      end

      it "renders account supplier name" do
        expect(response.body).to include(account.supplier.name.to_s)
      end
    end

    context "when the account doesn't exists" do
      let!(:account_error) {build(:account)}
      before do
        get "/accounts/", params: {id:account_error.id}
      end

      it "not renders account number" do
        expect(response.body).to_not include(account_error.account_number)
      end
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get "/accounts/new"
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    context "when the accounts exists"  do
      before do
        get "/accounts/#{account.id}/edit"
      end

      it "renders a successful response" do
        expect(response).to be_successful
      end

      it "renders account supplier name" do
        expect(response.body).to include(account.supplier.name)
      end
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      before do
        account_ = build(:account)
        post "/accounts/", params: { account: { account_number: account_.account_number, supplier_id: account.supplier.id } }
      end

      it "creates a new accounts" do
        puts response.body
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the created accounts" do
        get "/accounts", params: { id: account.id }
        expect(response.body).to include("Account was successfully created.")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      before do
        patch "/accounts/#{account.id}", params: { account: account_attributes }
      end

      it "redirects to the book" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the update book" do
        get "/accounts", params: { id: account.id }
        expect(response.body).to include("Account was successfully updated.")
      end

      it "redirects to the update accounts account number" do
        get "/accounts/#{account.id}"
        expect(response.body).to include(account.reload.account_number.to_s)
      end

      it "redirects to the update accounts supplier name" do
        get "/accounts/#{account.id}"
        expect(response.body).to include(account.reload.supplier.name.to_s)
      end
    end
  end

  describe "DELETE /destroy" do
    context "with valid parameters" do
      before do
        delete "/accounts/#{account.id}"
      end

      it "destroys the requested author" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the delete author" do
        get "/accounts", params: { id: account.id }
        expect(response.body).to include("Account was successfully destroyed.")
      end
    end
  end
end
