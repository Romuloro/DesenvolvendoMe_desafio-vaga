require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/suppliers", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Supplier. As you add validations to Supplier, be sure to
  # adjust the attributes here as well.
  let!(:supplier) {create(:supplier)}
  let!(:supplier_attributes) {attributes_for(:supplier)}

  describe "GET /index" do
    context "when the suppliers exists"  do
      before do
        get "/suppliers/"
      end

      it "renders a successful response" do
        expect(response).to have_http_status(:success)
      end

      it "renders suppliers name" do
        expect(response.body).to include(supplier.name)
      end
    end
  end

  describe "GET /show" do
    context "when the suppliers exists"  do
      before do
        get "/suppliers/", params: {id:supplier.id}
      end

      it "renders a successful response" do
        expect(response).to have_http_status(:success)
      end

      it "renders suppliers name" do
        expect(response.body).to include(supplier.name)
      end
    end

    context "when the supplier doesn't exists" do
      let!(:supplier_error) {build(:supplier)}
      before do
        get "/suppliers/", params: {id:supplier_error.id}
      end

      it "not renders supplier name" do
        puts response.body
        expect(response.body).to_not include(supplier_error.name)
        #expect(response).to have_http_status(:success)
      end
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get "/suppliers/new"
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    context "when the suppliers exists"  do
      before do
        get "/suppliers/#{supplier.id}/edit"
      end

      it "renders a successful response" do
        expect(response).to be_successful
      end

      it "renders suppliers name" do
        expect(response.body).to include(supplier.name)
      end
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      before do
        post "/suppliers/", params: { supplier: { name: supplier.name } }

      end

      it "creates a new Supplier" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the created Suppliers" do
        get "/suppliers", params: { id: supplier.id }
        expect(response.body).to include("Supplier was successfully created.")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      before do
        patch "/suppliers/#{supplier.id}", params: { supplier: { name: supplier.name } }
      end

      it "redirects to the supplier" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the update supplier" do
        get "/suppliers", params: { id: supplier.id }
        expect(response.body).to include("Supplier was successfully updated.")
      end

      it "redirects to the update book titulo" do
        get "/suppliers/#{supplier.id}"
        expect(response.body).to include(supplier.reload.name.to_s)
      end
    end
  end

  describe "DELETE /destroy" do
    context "with valid parameters" do
      before do
        delete "/suppliers/#{supplier.id}"
      end

      it "destroys the requested supplier" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the delete author" do
        get "/suppliers", params: { id: supplier.id }
        expect(response.body).to include("Supplier was successfully destroyed.")
      end
    end
  end
end
