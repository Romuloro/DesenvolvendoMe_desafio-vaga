require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/assemblies", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Assembly. As you add validations to Assembly, be sure to
  # adjust the attributes here as well.
  let!(:assembly) {create(:assembly)}
  let!(:assembly_attributes) {attributes_for(:assembly)}

  describe "GET /index" do
    context "when the part exists"  do
      before do
        get "/assemblies/"
      end

      it "renders a successful response" do
        expect(response).to have_http_status(:success)
      end

      it "renders assembly name" do
        expect(response.body).to include(assembly.name)
      end

      it "renders part name" do
        expect(response.body).to include(assembly.parts[0].name)
      end
    end
  end

  describe "GET /show" do
    context "when the account exists"  do
      before do
        get "/assemblies/", params: {id:assembly.id}
      end

      it "renders a successful response" do
        expect(response).to have_http_status(:success)
      end

      it "renders assembly name" do
        expect(response.body).to include(assembly.name)
      end

      it "renders part name" do
        expect(response.body).to include(assembly.parts[0].name)
      end
    end

    context "when the assembly doesn't exists" do
      let!(:assembly_error) {build(:assembly)}
      before do
        get "/assemblies/", params: {id:assembly_error.id}
      end

      it "not renders account number" do
        expect(response.body).to_not include(assembly_error.name)
      end
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get "/assemblies/new"
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    context "when the assembly exists"  do
      before do
        get "/assemblies/#{assembly.id}/edit"
      end

      it "renders a successful response" do
        expect(response).to be_successful
      end

      it "renders assembly name" do
        expect(response.body).to include(assembly.name)
      end

      it "renders part name" do
        expect(response.body).to include(assembly.parts[0].name)
      end
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      before do
        assembly_ = build(:assembly)
        post "/assemblies/", params: { assembly: { name: assembly_.name, parts: [assembly_.parts[0].id, assembly_.parts[1].id] } }
      end

      it "creates a new assembly" do
        puts response.body
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the created assemblies" do
        get "/assemblies", params: { id: assembly.id }
        expect(response.body).to include("Assembly was successfully created.")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      before do
        patch "/assemblies/#{assembly.id}", params: { assembly: { name: assembly.name, parts: [assembly.parts[0].id, assembly.parts[1].id] } }
      end

      it "redirects to the book" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the update assembly" do
        get "/assemblies", params: { id: assembly.id }
        expect(response.body).to include("Assembly was successfully updated.")
      end

      it "renders assembly name" do
        get "/assemblies", params: { id: assembly.id }
        expect(response.body).to include(assembly.name)
      end

      it "renders part name" do
        get "/assemblies", params: { id: assembly.id }
        expect(response.body).to include(assembly.parts[0].name)
      end
    end
  end

  describe "DELETE /destroy" do
    context "with valid parameters" do
      before do
        delete "/assemblies/#{assembly.id}"
      end

      it "destroys the requested parts" do
        expect(response).to have_http_status(:redirect)
      end

      it "redirects to the delete author" do
        get "/assemblies", params: { id: assembly.id }
        expect(response.body).to include("Assembly was successfully destroyed.")
      end
    end
  end
end
